heat_template_version: 2015-04-30

Description: >
  HOT Template Creates 1 Port Tuple, attaches it to Service Instance, Creates Service Template, 
  Creates 3 VMI Instance Per Port Tuple, Creates 1 VM's through Nova Server
  Assumption, Virtual Networks have been created already
  
parameters:

  management_network:
    type: string
    description: Name of management network to be created
  left_vn:
    type: string
    description: Name of left network to be created
  right_vn:
    type: string
    description: Name of right network to be created
  template_VirtualNetwork_1:
    type: string
    description: Name of management network to be created
  template_VirtualNetwork_2:
    type: string
    description: Name of left network to be created
  template_VirtualNetwork_3:
    type: string
    description: Name of right network to be created
  image:
    type: string
    description: Name of the image
  flavor:
    type: string
    description: Flavor
  fq_name:
    type: string
    description: Service instance FQDN for port tuple

  domain:
    type: string
    description: Name of the Domain
  st_name:
    type: string
    label: Service template fq name
    description: Service template for port tuple
  st_version:
    type: string
    description: Indicates service version
  st_service_mode:
    type: string
    description: service mode
  st_service_type:
    type: string
    description: service type
  st_image:
    type: string
    description: Name of the image
  st_flavor:
    type: string
    description: Flavor
  st_interface_type_1:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_shared_ip_1:
    type: boolean
    description: shared_ip for the ServiceTemplate
  st_static_route_1:
    type: boolean
    description: static_route_enable for the ServiceTemplate
  st_interface_type_2:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_shared_ip_2:
    type: boolean
    description: shared_ip for the ServiceTemplate
  st_static_route_2:
    type: boolean
    description: static_route_enable for the ServiceTemplate
  st_interface_type_3:
    type: string
    description: service_interface_type for the ServiceTemplate
  st_shared_ip_3:
    type: boolean
    description: shared_ip for the ServiceTemplate
  st_static_route_3:
    type: boolean
    description: static_route_enable for the ServiceTemplate
  st_scaling:
    type: string
    description: Indicates whether service scaling is enabled
  st_availability_zone:
    type: string
    description: Indicates availability zone is enabled
  st_ordered_interfaces:
    type: string
    description: Indicates service interfaces are ordered
  st_virtualization_type:
    type: string
    description: Indicates virtualization type

  service_instance_name:
    type: string
    label: Service instance name
    description: Service instance for port tuple
  service_instance_fq_name:
    type: string
    label: Service instance fq name
    description: Service instance FQDN for port tuple

  svm_name:
    type: string
    description: Name of the SVM
  flavor:
    type: string
    description: Flavor of the end VMs
  image:
    type: string
    description: Name of the end VM image


resources:


  template_ServiceTemplate:
    type: OS::Contrail::ServiceTemplate
    properties:
      name: { get_param: st_name }
      service_template_properties:
        {
          service_template_properties_version: { get_param: st_version },
          service_template_properties_service_mode: { get_param: st_service_mode },
          service_template_properties_service_type: { get_param: st_service_type },
          service_template_properties_interface_type:
            [
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_1 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_2 },
              },
              {
              service_template_properties_interface_type_service_interface_type: { get_param: st_interface_type_3 },
              }
            ],
          service_template_properties_ordered_interfaces: { get_param: st_ordered_interfaces },
          service_template_properties_service_virtualization_type: { get_param: st_virtualization_type },
        }
      domain: { get_param: domain }

  template_ServiceInstance:
    type: OS::Contrail::ServiceInstance
    depends_on: [ template_ServiceTemplate ]
    properties:
      name: { get_param: service_instance_name }
      service_instance_properties:
        {
          service_instance_properties_interface_list:
            [
              {
                service_instance_properties_interface_list_virtual_network: { get_param: management_network }

              },
              {
              service_instance_properties_interface_list_virtual_network: { get_param: left_vn }

              },
              {
              service_instance_properties_interface_list_virtual_network: { get_param: right_vn }

              }
            ],
        }
      service_template_refs: { get_resource: template_ServiceTemplate }

  template_PortTuple:
    type: OS::Contrail::PortTuple
    depends_on: [ template_ServiceInstance ]
    properties:
      service_instance: { list_join: [':', { get_attr: [ template_ServiceInstance, fq_name ] } ] }

  template_VirtualMachineInterface_1:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_1 },
        }
      port_tuple_refs: { get_resource: template_PortTuple }
      virtual_network_refs: { get_param: management_network }

  template_VirtualMachineInterface_2:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_2 },
        }
      port_tuple_refs: { get_resource: template_PortTuple }
      virtual_network_refs: { get_param: left_vn }

  template_VirtualMachineInterface_3:
    type: OS::Contrail::VirtualMachineInterface
    depends_on: [ template_PortTuple ]
    properties:
      virtual_machine_interface_properties:
        {
          virtual_machine_interface_properties_service_interface_type: { get_param: st_interface_type_3 },
        }
      port_tuple_refs: { get_resource: template_PortTuple }
      virtual_network_refs: { get_param: right_vn }

  template_InstanceIp_1:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_1 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_1 }
      virtual_network_refs: { get_param: template_VirtualNetwork_1 }

  template_InstanceIp_2:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_2 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_2 }
      virtual_network_refs: { get_param: template_VirtualNetwork_2 }

  template_InstanceIp_3:
    type: OS::Contrail::InstanceIp
    depends_on: [ template_VirtualMachineInterface_3 ]
    properties:
      virtual_machine_interface_refs: { get_resource: template_VirtualMachineInterface_3 }
      virtual_network_refs: { get_param: template_VirtualNetwork_3 }

  instance:
    type: OS::Nova::Server
    depends_on: [ template_InstanceIp_1, template_InstanceIp_2, template_InstanceIp_3 ]
    properties:
      name: {get_param: svm_name }
      image: { get_param:  st_image }
      flavor: { get_param: st_flavor }
      networks:
        - port: { get_resource: template_VirtualMachineInterface_1 }
        - port: { get_resource: template_VirtualMachineInterface_2 }
        - port: { get_resource: template_VirtualMachineInterface_3 }
